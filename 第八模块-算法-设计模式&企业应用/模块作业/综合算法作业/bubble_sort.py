
# 冒泡排序

def bubble_sort(sum):
    n = len(sum)
    for i in range(n-1):  # 外循环
        flag = False
        for j in range(n-i-1): # 内循环
            if sum[j] > sum[j+1]:
                # 交换 nums[j], nums[j + 1]
                sum[j],sum[j+1] = sum[j+1],sum[j]
                flag = True
        if not flag:
            return

sum = [3,4,2,3,5,6,8,9]
# print(len(sum)) # 8
# range(7) #0 1 2 3 4 5 6
bubble_sort(sum)
print(sum)
# ----------------------------- 算法解析
'''
内循环： 比较相邻的两个元素大小， 大的交换到右边，从左到右遍历。
外循环： 不断重复内循环，每轮将最大元素排到最右边，直到每个元素被交换到正确位置结束。

'''
# ----------------------------- 算法特性
'''
时间复杂度 O(N^2)
平均与最差： 外循环 n-1轮，使用o（N）时间;内循环分别遍历 n-1 ， n-2 ，n-3... 平均N/2次 = o(n)时间;
因此总体时间为 o(N^2)

最佳： o(N) ,在加入标志位flag ,若在某轮内循环中没有发生交换,说明数组已经排序好,直接返回结果.
当输入 已排序的数组时, 达到最佳排序时间o(N)

空间复杂度 O(1) ： 只需原地交换元素，使用常数大小的额外空间
'''
