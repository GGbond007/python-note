赋值方式：链式赋值，解压
三元表达式










#1、用例名称
选课系统

#2、场景
when：学员在刚入学时使用，学期完毕则结束，讲师与管理员在任期内使用
who: 学员、讲师、管理员
where：在固定校区选课，比如上海校区的学生只能选择上海校区的课程

#3、用例描述：
管理员创建北京和上海两个校区
管理员创建Linux、Python、Go3门课程
管理员创建班级，比如北京校区的Python开发16期，Go开发一期，以及上海校区的Linux运维36期
管理员创建北京校区的学员小晴，并将其分配给班级python18期
管理员创建了讲师Egon, 并将其分配给班级python16期和全栈脱产5期
讲师Egon创建一条python16期的上课纪录Day6
讲师Egon为Day6这节课所有的学员批改作业，小晴得了A, 李磊得了C-, 严帅得了B
学员小晴在python16的day6里提交作业
学员李磊查看自己所报的所有课程
学员李磊在查看自己在py16期的成绩列表 ，然后觉得很羞愧
学员小晴跟讲师Egon表白了

#4、用例的目的
对学员、课程、上课记录以及得分进行严格管理，为学员奖学金，讲师评级提供数据依据

#5、约束和限制
无


#名词列表：
管理员、校区、课程、班级、上课纪录、作业、成绩、讲师、学员、羞愧、表白
#筛选：去掉与领域无关的名词。视频应该算作一种奖品









#下面这个一定要当做练习题：练习属性查找于绑定方法

如果类变量是可变类型（比如列表和字典），那么诡异的事情就发生了
>>> class Student:
...     hobby_list=[] #类变量是可变类型，共享给所有实例
...     def __init__(self,Name):
...         self.name=Name
...     def add_hobby(self,hobby): #新增方法，用来为每个实例添加自己的爱好
...         self.hobby_list.append(hobby) #想要做的是往自己的‘爱好列表’即hobby_list里加‘爱好’
... 
>>> s1=Student('egon') #实例化产生学生s1
>>> s2=Student('jack') #实例化产生学生s2
>>> s3=Student('tom') #实例化产生学生s3
>>> 
>>> s1.add_hobby('Play basketball') #学生s1添加自己的爱好'Play basketball'
>>> s2.add_hobby('Play football') #学生s2添加自己的爱好'Play football'
>>> s3.add_hobby('run') #学生s3添加自己的爱好'run'
>>> 
>>> print(s1.hobby_list) #查看学生s1的爱好，发现除了自己的爱好之外竟然还有其余俩人的
['Play basketball', 'Play football', 'run']
解析：如果共享类型是可变类型的，那么所以实例便可以直接修改类变量，一旦修改便可以立刻‘反映’给其他所有的实例。这样便达不到我们想要的效果：每个学生都只往自己的hobby_list里添加爱好。

解决方案：一个学生的爱好可能有多个，因而选择列表来存放学生的爱好是没有问题的，但是我们可以将该列表定义成实例变量，问题就解决了
>>> class Student:
...     def __init__(self,Name):
...         self.name=Name
...         self.hobby_list=[] #将hobby_list定义成了实例变量，它是每个实例所特有的。
...     def add_hobby(self,hobby):
...         self.hobby_list.append(hobby)
... 
>>> student1=Student('egon')
>>> student2=Student('jack')
>>> student3=Student('tom')
>>> 
>>> student1.add_hobby('Play basketball')
>>> student2.add_hobby('Play football')
>>> student3.add_hobby('run')
>>> 
>>> student1.hobby_list #查看学生student1的爱好列表hobby_list，毫无疑问就只包含自己的爱好。 
['Play basketball']









领域建模中讲：
至此我们已经初步了解了类与对象的定义与使用，需要补充说明的是：站的角度不同，定义出的类是截然不同的；
现实中的类并不完全等于程序中的类，比如现实中的公司类，在程序中有时需要拆分成部门类，业务类等；
有时为了编程需求，程序中也可能会定义现实中不存在的类，比如策略类，现实中并不存在，但是在程序中却是一个很常见的类。


提示：站在不同的角度，类的定义是不同的，站在老男孩学校的角度，有老师类和学生类，而站在人类的角度，老师和学生都是人，站在动物的角度，老师，学生，猫，狗，猪都是动物。
	
	需要强调的是现实中的类并不完全等于程序中的类，比如现实中的公司类，在程序中有时需要拆分成部门类，业务类...... 并且有时为了编程需求，程序中也可能会定义现实中不存在的类，比如策略(Strategy)是随着人类文明发展而总结出的一个并不存在于现实世界中类，但在程序设计领域中，这确实一个很常见的类，所以说程序中的类是对现实类的模拟但绝不等同于现实中的类。在程序设计中，除了创建现实中存在的类之外，还需要根据需求创建很多非现实的类，这正是各种设计方法、设计模式、设计原则大显身手的地方。 





















注释
变量（数据类型，引用计数与垃圾回收，变量赋值方式）
用户交互
格式化输出
基本运算符
流程控制if-else
流程控制循环
IDE


三元表达式


变量id，type，value，可变不可变


python2的raw_input

列表解析

序列类型

第一类对象一切皆对象


================================》函数装饰器与生成器练习题

我们可以编写装饰器来完成为所有表达式形式yield对应生成器的初始化操作，如下
def init(func):
    def wrapper(*args,**kwargs):
        g=func(*args,**kwargs)
        next(g)
        return g
    return wrapper

@init
def eater():
    print('Ready to eat')
    while True:
        food=yield
        print('get the food: %s, and start to eat' %food)















